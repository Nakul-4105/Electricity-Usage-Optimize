# -*- coding: utf-8 -*-
"""app.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/19i64fg-stZANMzMOpd8mT7gyL9aBKtH7
"""

pip install pandas numpy matplotlib seaborn streamlit
import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# --- Page Configuration ---
st.set_page_config(page_title="Electricity Usage Optimizer", layout="wide")
sns.set_style("whitegrid")

# --- App Title ---
st.title('âš¡ India Electricity Usage Optimizer')
st.markdown("Analyze electricity consumption patterns across different states in India.")

# --- File Uploader ---
uploaded_file = st.file_uploader(
    "Upload your long_data_.csv file",
    type=["csv"]
)

if uploaded_file:
    # --- Load and Process Data ---
    df = pd.read_csv(uploaded_file)
    df['datetime'] = pd.to_datetime(df['Dates'])
    df.set_index('datetime', inplace=True)
    df.drop(columns=['Dates', 'latitude', 'longitude'], inplace=True)
    st.success("Dataset loaded and prepared!")

    # --- State Selection ---
    state_list = df['States'].unique()
    selected_state = st.selectbox("Select a State to Analyze", state_list, index=list(state_list).index('Maharashtra'))

    st.header(f"Analysis for {selected_state}")

    # --- Filter data for the selected state ---
    df_state = df[df['States'] == selected_state].copy()

    # --- Analysis and Visualization ---
    daily_usage = df_state['Usage'].resample('D').sum()
    df_state['hour'] = df_state.index.hour
    hourly_avg = df_state.groupby('hour')['Usage'].mean()

    col1, col2 = st.columns(2)

    with col1:
        st.subheader("Daily Consumption Pattern")
        fig1, ax1 = plt.subplots()
        daily_usage.plot(ax=ax1)
        ax1.set_ylabel("Consumption (MW)")
        st.pyplot(fig1)

    with col2:
        st.subheader("Average Hourly Consumption")
        fig2, ax2 = plt.subplots()
        hourly_avg.plot(kind='bar', ax=ax2)
        ax2.set_xlabel("Hour of Day")
        st.pyplot(fig2)

    # --- Optimization Suggestions ---
    st.header("ðŸ’¡ Optimization Suggestions")
    peak_hour = hourly_avg.idxmax()
    peak_value = hourly_avg.max()

    st.info(f"**Peak Usage Identified:** In {selected_state}, the highest average consumption occurs around **{peak_hour}:00**.")
    st.warning(f"**Recommendation:** To save energy, consider shifting heavy appliance usage away from this peak hour.")
